/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as LoginImport } from './routes/login'
import { Route as LibraryImport } from './routes/library'
import { Route as IndexImport } from './routes/index'
import { Route as PlaylistIdImport } from './routes/playlist/$id'
import { Route as AlbumIdImport } from './routes/album/$id'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LibraryRoute = LibraryImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistIdRoute = PlaylistIdImport.update({
  id: '/playlist/$id',
  path: '/playlist/$id',
  getParentRoute: () => rootRoute,
} as any)

const AlbumIdRoute = AlbumIdImport.update({
  id: '/album/$id',
  path: '/album/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/album/$id': {
      id: '/album/$id'
      path: '/album/$id'
      fullPath: '/album/$id'
      preLoaderRoute: typeof AlbumIdImport
      parentRoute: typeof rootRoute
    }
    '/playlist/$id': {
      id: '/playlist/$id'
      path: '/playlist/$id'
      fullPath: '/playlist/$id'
      preLoaderRoute: typeof PlaylistIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/library': typeof LibraryRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/album/$id': typeof AlbumIdRoute
  '/playlist/$id': typeof PlaylistIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/library': typeof LibraryRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/album/$id': typeof AlbumIdRoute
  '/playlist/$id': typeof PlaylistIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/library': typeof LibraryRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/album/$id': typeof AlbumIdRoute
  '/playlist/$id': typeof PlaylistIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/library'
    | '/login'
    | '/search'
    | '/album/$id'
    | '/playlist/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/library' | '/login' | '/search' | '/album/$id' | '/playlist/$id'
  id:
    | '__root__'
    | '/'
    | '/library'
    | '/login'
    | '/search'
    | '/album/$id'
    | '/playlist/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LibraryRoute: typeof LibraryRoute
  LoginRoute: typeof LoginRoute
  SearchRoute: typeof SearchRoute
  AlbumIdRoute: typeof AlbumIdRoute
  PlaylistIdRoute: typeof PlaylistIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LibraryRoute: LibraryRoute,
  LoginRoute: LoginRoute,
  SearchRoute: SearchRoute,
  AlbumIdRoute: AlbumIdRoute,
  PlaylistIdRoute: PlaylistIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/library",
        "/login",
        "/search",
        "/album/$id",
        "/playlist/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/library": {
      "filePath": "library.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/album/$id": {
      "filePath": "album/$id.tsx"
    },
    "/playlist/$id": {
      "filePath": "playlist/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
